[project]
name = "artipy"
dynamic = ["version"]
description = "\"Easily generate Genshin Impact artifacts\""
readme = "README.md"
license = { file = "LICENSE" }
requires-python = "<3.14,>=3.13.0"
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13"
]
dependencies = [
  "toml>=0.10.2",
  "plotly>=5.20.0",
  "pandas>=2.2.2"
]

[dependency-groups]
dev = [
  "pytest>=8.1.1",
  "python-semantic-release>=9.4.1",
  "sphinx>=7.2.6",
  "sphinx-rtd-theme>=2.0.0",
  "ghp-import>=2.1.0",
  "hypothesis>=6.100.1",
  "pytest-cov>=5.0.0"
]

[build-system]
requires = [ "hatchling" ]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/artipy/__init__.py"

[tool.hatch.build.targets.wheel]
packages = [ "src/artipy" ]

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.format]
line-ending = "lf"
quote-style = "double"

[tool.ruff.lint]
select = [
    "A", "ANN", "B", "BLE", "C4", "COM", "DTZ", "E",
    "EM", "ERA", "F", "FA", "FURB", "G", "I", "INP", "ISC", "NPY",
    "PD", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PTH", "PYI",
    "Q", "Q003", "RET", "RSE", "RUF", "S", "SIM", "SLOT", "T20", "TC", "TID",
    "TRY", "UP", "YTT"
]

ignore = [
    "ANN401",  # Any is correct in some cases
    "D1",  # Well named items don't need docstrings
    "E501",  # Ruff handles this 
    "RET504",  # A bit too opinionated 
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF029",  # Some interfaces need an async method
    "S101",  # Allow assert
    "S311",  # I am not using anything for cryptographic purposes
    "PLC0415",  # Top-of-file imports are not always best
]

unfixable = [
    "E501",  # Handled by ruff format
    "F841", # I'm planning to use it
    "ERA",  # Allow commented code
]

[tool.ruff.lint.pydocstyle]
convention = "google"
"ignore-decorators" = ["typing.overload"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "PLC1901", "PLR2004", "PLR6301", "S", "TID252"
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"


[tool.pyright]
include = ["src"]
exclude = [
    "**/__pycache__",
    "build",
    "dist",
    ".venv",
]
pythonVersion = "3.13"
typeCheckingMode = "strict"
pythonPlatform = "All"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"

[tool.pytest.ini_options]
minversion = "8.0.0"
testpaths = [ "tests/" ]
addopts = "--cov=src/artipy --cov-report term-missing"

[tool.coverage.run]
omit = ["plots.py"]

[tool.semantic_release]
version_variable = [ "src/artipy/__init__.py:__version__" ]
build_command = "uv build"
version_source = "tag"
commit_version_number = true
commit_message = "chore(release): v{version} [skip ci]"
